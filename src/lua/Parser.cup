/* CUP Parser */

package lua;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;


parser code {:
    public static void main(String[] args) throws Exception{
        try {
			Parser parser = new Parser();
			parser.setScanner(new Lexer(new FileReader (args[0])));
            parser.parse();
        } catch ( IOException exception ) {
            throw new Error( "Unable to open file" );
        }
    }

    public void syntax_error (Symbol s) {
        report_error("Erro de sintaxe na linha: " + (s.right+1) + " e na coluna: " + s.left + ". Texto: -- "+s.value+ " --", null);
    }


:};

init with {:               :};
scan with {: return getScanner().next_token(); :};

//DEFINICAO TOKENS 
//terminal EXCLAMACAO;
terminal String NOME, STRING_LUA, COMENTARIO_EM_BLOCO, COMENTARIO_CURTO, LACO_FACA, FIM_DO_LACO, LACO_ENQUANTO, REPETICAO, ATE_LIMITE_LACO, SE_CONDICIONAL, ENTAO, SENAO_SE, SENAO, LACO_PARA, DENTRO, FUNCAO, FUNCAO_LOCAL, DEFINICAO_LOCAL, RETORNO, QUEBRA_LACO, NULO,VALOR_FALSO,VALOR_VERDADEIRO, OPERADOR_E, OPERADOR_OU, NEGACAO, brancos, ATRIBUICAO, PONTO, DOIS_PONTOS, VIRGULA, ABRE_COLCHETES, FECHA_COLCHETES, EXPRESSAO_VARARG , PONTO_E_VIRGULA, SOMA, SUBTRACAO, MULTIPLICACAO, DIVISAO,  EXPONENCIACAO, RESTO, CONCATENAR_STRING, MENOR_QUE, MENOR_IGUAL_QUE, MAIOR_QUE, MAIOR_IGUAL_QUE, IGUAL_COMPARATIVO, DIFERENTE, TAMANHO, ABRE_PARENTESIS, FECHA_PARENTESIS, ABRE_CHAVES, FECHA_CHAVES;
terminal Double NUMERO;


non terminal bloco, comando, funcao,  op_un, ultimo_comando, nome_de_funcao, lista_de_variaveis, variavel, lista_de_nomes, lista_de_expressoes, expressao, prefixo_de_expressao,  chamada_de_funcao,  argumentos, corpo_da_funcao,  lista_de_parametros, construtor_de_tabelas, lista_de_campos, campo, separador_de_campos, op_bin, n_lista_de_expressoes, vazio, lista_de_comandos, n_comando_senao, n_repeticao_de_expressoes, n_atribuicao_lista_de_expressoes, n_lista_de_parametros, n_ponto_e_virgula; 

// PRECEDÃŠNCIA
precedence nonassoc ABRE_PARENTESIS, FECHA_PARENTESIS; 
precedence nonassoc VIRGULA ;


precedence left OPERADOR_OU;
precedence left OPERADOR_E;
precedence left MENOR_QUE, MAIOR_QUE, MENOR_IGUAL_QUE, MAIOR_IGUAL_QUE, DIFERENTE, IGUAL_COMPARATIVO;
precedence left CONCATENAR_STRING;
precedence left SOMA, SUBTRACAO;
precedence left MULTIPLICACAO, DIVISAO, RESTO;
precedence left NEGACAO, TAMANHO;
precedence left  EXPONENCIACAO;

start with bloco;

bloco 			::=    lista_de_comandos ultimo_comando {: System.out.print("bloco ::= lista_de_comandos ultimo_comando\n"); :}
                 	       | lista_de_comandos {: System.out.print("bloco::= lista_de_comandos\n"); :}
                               | ultimo_comando  {: System.out.print("bloco::= ultimo_comando\n"); :}
                               | vazio  {: System.out.print("VAZIO\n"); :}
;

lista_de_comandos	::=	comando n_ponto_e_virgula   {: System.out.print("lista_de_comandos::= comando n_ponto_e_virgula\n"); :}
					|  comando n_ponto_e_virgula  lista_de_comandos   {:System.out.print("lista_de_comandos::= comando n_ponto_e_virgula\n"); :}
					;
					
						

 prefixo_de_expressao		::=		variavel   {: System.out.print("pref_d_exp::= variavel\n"); :}
					| chamada_de_funcao   {: System.out.print("pref_de_exp::=chamada_de_funcao\n"); :}
					| ABRE_PARENTESIS expressao FECHA_PARENTESIS   {: System.out.print("pref_de_exp::= ( EXP )\n"); :}
					;

 
					
comando        	::=    		lista_de_variaveis  ATRIBUICAO  lista_de_expressoes 
				| chamada_de_funcao
				| LACO_FACA  bloco FIM_DO_LACO 
				| LACO_ENQUANTO  expressao   LACO_FACA  bloco FIM_DO_LACO
				| REPETICAO  bloco  ATE_LIMITE_LACO  expressao
                | SE_CONDICIONAL expressao ENTAO bloco n_comando_senao FIM_DO_LACO
                | LACO_PARA  NOME  ATRIBUICAO  expressao  VIRGULA  expressao  n_repeticao_de_expressoes  LACO_FACA  bloco FIM_DO_LACO {: System.out.print("comando::= laco_para nome atribuicao exp virgula exp n_rep_exp bloco end lista_de_expressoes laco_faca\n"); :}
				| LACO_PARA lista_de_nomes  DENTRO  lista_de_expressoes  LACO_FACA bloco FIM_DO_LACO {: System.out.print("comando::= laco_para lista_de_nomes dentro lista_de_expressoes laco_faca\n"); :}
				
                                | FUNCAO  nome_de_funcao corpo_da_funcao  
		 		| FUNCAO_LOCAL  NOME  corpo_da_funcao
		 		| DEFINICAO_LOCAL  lista_de_nomes n_atribuicao_lista_de_expressoes
				;
					
ultimo_comando		::=	RETORNO  n_lista_de_expressoes 	
				| QUEBRA_LACO  
				; 						

n_lista_de_expressoes              ::= lista_de_expressoes 
                            | vazio ;

funcao ::= FUNCAO corpo_da_funcao;

nome_de_funcao		::=     NOME 
				| NOME PONTO nome_de_funcao 
				| NOME DOIS_PONTOS NOME 
						;
						

n_comando_senao			::= 	SENAO  bloco 						
				| SENAO_SE expressao ENTAO  bloco n_comando_senao
				| vazio
				;	
												
n_repeticao_de_expressoes		::=     VIRGULA  expressao				
				| vazio 
				;

lista_de_variaveis			::=     variavel
				| variavel VIRGULA  lista_de_variaveis
				;
	
				
lista_de_expressoes			::=     expressao
				| expressao  VIRGULA   lista_de_expressoes 
				;
						
n_atribuicao_lista_de_expressoes   ::=   ATRIBUICAO  lista_de_expressoes
                      | vazio
		      ;	
					   
						
				 
					 		
lista_de_nomes    	::=    	NOME 
			| lista_de_nomes  VIRGULA  NOME
			;
					
variavel				::=		NOME
						| prefixo_de_expressao ABRE_COLCHETES expressao FECHA_COLCHETES	
						| prefixo_de_expressao  PONTO NOME
						;

					
expressao				::=		NULO
                                                |VALOR_FALSO
						|VALOR_VERDADEIRO
						| NUMERO
                                                | STRING_LUA 
						|  EXPRESSAO_VARARG 
						| funcao
                                                | prefixo_de_expressao
						| construtor_de_tabelas
                                                | expressao op_bin expressao 
						| op_un expressao
						;	
	
					
	
	
 chamada_de_funcao	::= 	 prefixo_de_expressao  argumentos
			| prefixo_de_expressao DOIS_PONTOS NOME  argumentos
			;

				
 argumentos			::= 	ABRE_PARENTESIS n_lista_de_expressoes FECHA_PARENTESIS
				| construtor_de_tabelas
				| NOME
				;

corpo_da_funcao		::= 	ABRE_PARENTESIS  n_lista_de_parametros  FECHA_PARENTESIS  bloco  FIM_DO_LACO
				;

n_lista_de_parametros              ::=  lista_de_parametros 
                            | vazio 	;			

lista_de_parametros			::=		lista_de_nomes
					| lista_de_nomes  VIRGULA   EXPRESSAO_VARARG
					|  EXPRESSAO_VARARG
					;	
	

construtor_de_tabelas ::=    ABRE_CHAVES lista_de_campos FECHA_CHAVES
 			| ABRE_CHAVES FECHA_CHAVES
 			; 

 						
lista_de_campos		 ::= 	campo
                                | campo separador_de_campos lista_de_campos
				;
 						
 						
campo			::=		ABRE_COLCHETES expressao FECHA_COLCHETES ATRIBUICAO expressao
					| NOME ATRIBUICAO expressao
					| expressao
					;
						

separador_de_campos		::=	VIRGULA 
					| PONTO_E_VIRGULA						
					;

		
op_bin			::=		SOMA
					| SUBTRACAO
					| MULTIPLICACAO
					| DIVISAO
					| RESTO
					|  EXPONENCIACAO
					| CONCATENAR_STRING
					| IGUAL_COMPARATIVO
					| MENOR_IGUAL_QUE
					| DIFERENTE
					| MENOR_QUE
					| MAIOR_QUE
					| MAIOR_IGUAL_QUE
					| OPERADOR_E
					| OPERADOR_OU
					;
						
op_un			::=		SUBTRACAO
					| NEGACAO
					| TAMANHO
					;
								

						
n_ponto_e_virgula			::= 	PONTO_E_VIRGULA  | vazio ;


vazio			::= brancos ;