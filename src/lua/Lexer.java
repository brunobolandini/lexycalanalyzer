/* The following code was generated by JFlex 1.6.1 */

package lua;

import java_cup.runtime.Symbol;
import java_cup.sym;



/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>Lexer.lex</tt>
 */
public class Lexer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\12\1\5\1\20\1\20\1\17\22\0\1\40\1\0\1\15"+
    "\1\54\1\0\1\53\2\0\1\57\1\60\1\50\1\6\1\62\1\1"+
    "\1\10\1\51\1\7\1\7\1\7\7\7\1\56\1\55\1\46\1\45"+
    "\1\44\2\0\4\13\1\11\25\13\1\2\1\16\1\4\1\52\1\13"+
    "\1\0\1\21\1\24\1\36\1\23\1\26\1\34\1\13\1\42\1\33"+
    "\1\13\1\27\1\31\1\13\1\22\1\30\1\41\1\13\1\25\1\32"+
    "\1\37\1\35\1\13\1\43\3\13\1\61\1\14\1\3\1\47\6\0"+
    "\1\20\u1fa2\0\1\20\1\20\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7"+
    "\1\10\1\11\1\12\1\6\1\1\15\12\1\13\1\14"+
    "\1\15\1\1\1\16\1\17\1\20\1\21\1\22\1\23"+
    "\1\24\1\25\1\26\1\27\1\30\1\0\1\10\1\0"+
    "\1\10\1\0\1\10\1\31\1\0\1\32\1\0\3\12"+
    "\1\33\4\12\1\34\1\12\1\35\1\36\7\12\1\37"+
    "\1\40\1\41\1\42\3\0\1\10\1\43\1\44\1\45"+
    "\1\46\3\12\1\47\3\12\1\50\5\12\1\51\1\0"+
    "\3\12\1\52\4\12\1\53\1\54\1\12\1\0\1\55"+
    "\3\12\1\56\1\57\1\12\1\60\1\61\1\0\1\62"+
    "\1\63\1\64\1\0\1\12\2\0\1\12\1\65\1\0"+
    "\1\66\5\0\1\67";

  private static int [] zzUnpackAction() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\63\0\146\0\63\0\63\0\63\0\63\0\231"+
    "\0\314\0\377\0\u0132\0\u0132\0\u0165\0\u0198\0\u01cb\0\u01fe"+
    "\0\u0231\0\u0264\0\u0297\0\u02ca\0\u02fd\0\u0330\0\u0363\0\u0396"+
    "\0\u03c9\0\u03fc\0\u042f\0\u0462\0\u0495\0\u04c8\0\63\0\63"+
    "\0\63\0\63\0\63\0\63\0\63\0\63\0\63\0\63"+
    "\0\63\0\u04fb\0\u052e\0\u0561\0\u0561\0\u0594\0\u05c7\0\u05fa"+
    "\0\u0165\0\u0165\0\u062d\0\u0660\0\u0693\0\u06c6\0\u0132\0\u06f9"+
    "\0\u072c\0\u075f\0\u0792\0\u0132\0\u07c5\0\u0132\0\u0132\0\u07f8"+
    "\0\u082b\0\u085e\0\u0891\0\u08c4\0\u08f7\0\u092a\0\63\0\63"+
    "\0\63\0\63\0\u095d\0\u0990\0\u09c3\0\u09c3\0\63\0\u0132"+
    "\0\u0132\0\u0132\0\u09f6\0\u0a29\0\u0a5c\0\u0132\0\u0a8f\0\u0ac2"+
    "\0\u0af5\0\u0132\0\u0b28\0\u0b5b\0\u0b8e\0\u0bc1\0\u0bf4\0\u0c27"+
    "\0\u0c5a\0\u0c8d\0\u0cc0\0\u0cf3\0\u0d26\0\u0d59\0\u0d8c\0\u0dbf"+
    "\0\u0df2\0\u0132\0\u0132\0\u0e25\0\u0e58\0\u0132\0\u0e8b\0\u0ebe"+
    "\0\u0ef1\0\u0f24\0\u0132\0\u0f57\0\u0132\0\u0132\0\u0f8a\0\u0132"+
    "\0\u0132\0\u0132\0\u0fbd\0\u0ff0\0\u1023\0\u1056\0\u1089\0\u0c5a"+
    "\0\u10bc\0\u0132\0\u10ef\0\u1122\0\u1155\0\u1188\0\u11bb\0\63";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\7\1\13\1\14\1\15\1\2\1\7"+
    "\1\0\1\16\1\17\1\20\1\21\1\22\1\23\1\13"+
    "\1\24\1\25\1\13\1\26\1\27\1\30\1\13\1\31"+
    "\1\7\2\13\1\32\1\33\1\34\1\35\1\36\1\37"+
    "\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\64\0\1\52\5\0\1\53\1\54\61\0"+
    "\1\53\1\54\61\0\1\11\1\55\1\56\14\0\1\56"+
    "\43\0\1\57\1\60\61\0\1\13\1\0\1\13\1\0"+
    "\2\13\4\0\17\13\1\0\3\13\17\0\15\61\1\62"+
    "\1\63\44\61\7\0\1\13\1\0\1\13\1\0\2\13"+
    "\4\0\1\13\1\64\15\13\1\0\3\13\26\0\1\13"+
    "\1\0\1\13\1\0\2\13\4\0\7\13\1\65\2\13"+
    "\1\66\4\13\1\0\3\13\26\0\1\13\1\0\1\13"+
    "\1\0\2\13\4\0\7\13\1\67\7\13\1\0\3\13"+
    "\26\0\1\13\1\0\1\13\1\0\2\13\4\0\4\13"+
    "\1\70\12\13\1\0\3\13\26\0\1\13\1\0\1\13"+
    "\1\0\2\13\4\0\5\13\1\71\11\13\1\0\3\13"+
    "\26\0\1\13\1\0\1\13\1\0\2\13\4\0\1\13"+
    "\1\72\6\13\1\73\6\13\1\0\3\13\26\0\1\13"+
    "\1\0\1\13\1\0\2\13\4\0\4\13\1\74\12\13"+
    "\1\0\3\13\26\0\1\13\1\0\1\13\1\0\2\13"+
    "\4\0\7\13\1\75\7\13\1\0\3\13\26\0\1\13"+
    "\1\0\1\13\1\0\2\13\4\0\1\13\1\76\11\13"+
    "\1\77\3\13\1\0\3\13\26\0\1\13\1\0\1\13"+
    "\1\0\2\13\4\0\1\100\6\13\1\101\4\13\1\102"+
    "\2\13\1\0\3\13\26\0\1\13\1\0\1\13\1\0"+
    "\2\13\4\0\1\13\1\103\15\13\1\0\3\13\26\0"+
    "\1\13\1\0\1\13\1\0\2\13\4\0\4\13\1\104"+
    "\12\13\1\0\1\13\1\105\1\13\26\0\1\13\1\0"+
    "\1\13\1\0\2\13\4\0\17\13\1\0\1\13\1\106"+
    "\1\13\64\0\1\107\62\0\1\110\62\0\1\111\62\0"+
    "\1\112\15\0\2\113\1\114\60\113\7\0\1\53\1\54"+
    "\1\56\14\0\1\56\43\0\1\57\54\0\1\115\4\0"+
    "\1\115\1\116\62\0\1\57\1\0\1\56\14\0\1\56"+
    "\44\0\1\117\52\0\5\61\1\0\11\61\2\0\42\61"+
    "\7\0\1\13\1\0\1\13\1\0\2\13\4\0\2\13"+
    "\1\120\14\13\1\0\3\13\26\0\1\13\1\0\1\13"+
    "\1\0\2\13\4\0\16\13\1\121\1\0\3\13\26\0"+
    "\1\13\1\0\1\13\1\0\2\13\4\0\10\13\1\122"+
    "\6\13\1\0\3\13\26\0\1\13\1\0\1\13\1\0"+
    "\2\13\4\0\5\13\1\123\11\13\1\0\3\13\26\0"+
    "\1\13\1\0\1\13\1\0\2\13\4\0\16\13\1\124"+
    "\1\0\1\125\2\13\26\0\1\13\1\0\1\13\1\0"+
    "\2\13\4\0\2\13\1\126\14\13\1\0\3\13\26\0"+
    "\1\13\1\0\1\13\1\0\2\13\4\0\11\13\1\127"+
    "\5\13\1\0\3\13\26\0\1\13\1\0\1\13\1\0"+
    "\2\13\4\0\15\13\1\130\1\13\1\0\3\13\26\0"+
    "\1\13\1\0\1\13\1\0\2\13\4\0\10\13\1\131"+
    "\6\13\1\0\3\13\26\0\1\13\1\0\1\13\1\0"+
    "\2\13\4\0\4\13\1\132\12\13\1\0\3\13\26\0"+
    "\1\13\1\0\1\13\1\0\2\13\4\0\1\13\1\133"+
    "\15\13\1\0\3\13\26\0\1\13\1\0\1\13\1\0"+
    "\2\13\4\0\16\13\1\134\1\0\3\13\26\0\1\13"+
    "\1\0\1\13\1\0\2\13\4\0\14\13\1\135\2\13"+
    "\1\0\3\13\26\0\1\13\1\0\1\13\1\0\2\13"+
    "\4\0\5\13\1\136\11\13\1\0\3\13\26\0\1\13"+
    "\1\0\1\13\1\0\2\13\4\0\12\13\1\137\4\13"+
    "\1\0\3\13\17\0\4\140\1\0\56\140\2\0\1\141"+
    "\67\0\1\116\62\0\1\13\1\0\1\13\1\0\2\13"+
    "\4\0\1\142\16\13\1\0\3\13\26\0\1\13\1\0"+
    "\1\13\1\0\2\13\4\0\14\13\1\143\2\13\1\0"+
    "\3\13\26\0\1\13\1\0\1\13\1\0\2\13\4\0"+
    "\5\13\1\144\11\13\1\0\3\13\26\0\1\13\1\0"+
    "\1\13\1\0\2\13\4\0\5\13\1\145\11\13\1\0"+
    "\3\13\26\0\1\13\1\0\1\13\1\0\2\13\4\0"+
    "\1\146\16\13\1\0\3\13\26\0\1\13\1\0\1\13"+
    "\1\0\2\13\4\0\11\13\1\147\5\13\1\0\3\13"+
    "\26\0\1\13\1\0\1\13\1\0\2\13\4\0\15\13"+
    "\1\150\1\13\1\0\3\13\26\0\1\13\1\0\1\13"+
    "\1\0\2\13\4\0\12\13\1\151\4\13\1\0\3\13"+
    "\26\0\1\13\1\0\1\13\1\0\2\13\4\0\5\13"+
    "\1\152\11\13\1\0\3\13\26\0\1\13\1\0\1\13"+
    "\1\0\2\13\4\0\1\13\1\153\15\13\1\0\3\13"+
    "\26\0\1\13\1\0\1\13\1\0\2\13\4\0\10\13"+
    "\1\154\6\13\1\0\3\13\17\0\5\140\1\0\55\140"+
    "\1\141\1\155\61\141\7\0\1\13\1\0\1\13\1\0"+
    "\2\13\4\0\6\13\1\156\10\13\1\0\3\13\26\0"+
    "\1\13\1\0\1\13\1\0\2\13\4\0\4\13\1\157"+
    "\12\13\1\0\3\13\26\0\1\13\1\0\1\13\1\0"+
    "\2\13\4\0\1\160\16\13\1\0\3\13\26\0\1\13"+
    "\1\0\1\13\1\0\2\13\4\0\12\13\1\161\4\13"+
    "\1\0\3\13\26\0\1\13\1\0\1\13\1\0\2\13"+
    "\4\0\10\13\1\162\6\13\1\0\3\13\26\0\1\13"+
    "\1\0\1\13\1\0\2\13\4\0\5\13\1\163\11\13"+
    "\1\0\3\13\26\0\1\13\1\0\1\13\1\0\2\13"+
    "\4\0\16\13\1\164\1\0\3\13\26\0\1\13\1\0"+
    "\1\13\1\0\2\13\4\0\10\13\1\165\6\13\1\0"+
    "\3\13\26\0\1\13\1\0\1\13\1\0\2\13\4\0"+
    "\5\13\1\166\11\13\1\0\3\13\17\0\1\141\1\167"+
    "\61\141\7\0\1\13\1\0\1\13\1\0\2\13\4\0"+
    "\1\13\1\170\15\13\1\0\3\13\26\0\1\13\1\0"+
    "\1\13\1\0\2\13\4\0\16\13\1\171\1\0\3\13"+
    "\26\0\1\13\1\0\1\13\1\0\2\13\4\0\13\13"+
    "\1\172\3\13\1\0\3\13\26\0\1\13\1\0\1\13"+
    "\1\0\2\13\4\0\17\13\1\173\3\13\26\0\1\13"+
    "\1\0\1\13\1\0\2\13\4\0\12\13\1\174\4\13"+
    "\1\0\3\13\17\0\1\141\1\167\2\141\1\175\56\141"+
    "\34\0\1\176\35\0\1\13\1\0\1\13\1\0\2\13"+
    "\4\0\7\13\1\177\7\13\1\0\3\13\17\0\1\141"+
    "\1\155\2\141\1\200\56\141\35\0\1\201\34\0\1\13"+
    "\1\0\1\13\1\0\2\13\4\0\1\13\1\202\15\13"+
    "\1\0\3\13\41\0\1\203\76\0\1\204\63\0\1\205"+
    "\56\0\1\206\57\0\1\207\54\0\1\210\40\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4590];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\1\1\4\11\27\1\13\11\1\0\1\1"+
    "\1\0\1\1\1\0\2\1\1\0\1\1\1\0\23\1"+
    "\4\11\3\0\1\1\1\11\21\1\1\0\13\1\1\0"+
    "\11\1\1\0\3\1\1\0\1\1\2\0\2\1\1\0"+
    "\1\1\5\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[136];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public Lexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 182) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(sym.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { throw new RuntimeException("Caractere inválido " + yytext() + " na linha " + yyline + ", coluna " +yycolumn);
            }
          case 56: break;
          case 2: 
            { System.out.println("-");return new Symbol( Sym.SUBTRACAO, yychar, yyline, yytext());
            }
          case 57: break;
          case 3: 
            { System.out.println("[");return new Symbol( Sym.ABRE_COLCHETES, yychar, yyline, yytext());
            }
          case 58: break;
          case 4: 
            { System.out.println("}");return new Symbol( Sym.FECHA_CHAVES, yychar, yyline, yytext());
            }
          case 59: break;
          case 5: 
            { System.out.println("]");return new Symbol( Sym.FECHA_COLCHETES, yychar, yyline, yytext());
            }
          case 60: break;
          case 6: 
            { 
            }
          case 61: break;
          case 7: 
            { System.out.println("+");return new Symbol( Sym.SOMA, yychar, yyline, yytext());
            }
          case 62: break;
          case 8: 
            { System.out.println("number");return new Symbol( Sym.NUMERO, yychar, yyline, yytext());
            }
          case 63: break;
          case 9: 
            { System.out.println("ponto");return new Symbol( Sym.PONTO, yychar, yyline, yytext());
            }
          case 64: break;
          case 10: 
            { System.out.println("nome"); return new Symbol( Sym.NOME, yychar, yyline, yytext());
            }
          case 65: break;
          case 11: 
            { System.out.println(">");return new Symbol( Sym.MAIOR_QUE, yychar, yyline, yytext());
            }
          case 66: break;
          case 12: 
            { System.out.println("=");return new Symbol( Sym.ATRIBUICAO, yychar, yyline, yytext());
            }
          case 67: break;
          case 13: 
            { System.out.println("<");return new Symbol( Sym.MENOR_QUE, yychar, yyline, yytext());
            }
          case 68: break;
          case 14: 
            { System.out.println("*");return new Symbol( Sym.MULTIPLICACAO, yychar, yyline, yytext());
            }
          case 69: break;
          case 15: 
            { System.out.println("/");return new Symbol( Sym.DIVISAO, yychar, yyline, yytext());
            }
          case 70: break;
          case 16: 
            { System.out.println("^");return new Symbol( Sym.EXPONENCIACAO, yychar, yyline, yytext());
            }
          case 71: break;
          case 17: 
            { System.out.println("%");return new Symbol( Sym.RESTO, yychar, yyline, yytext());
            }
          case 72: break;
          case 18: 
            { System.out.println("#");return new Symbol( Sym.TAMANHO, yychar, yyline, yytext());
            }
          case 73: break;
          case 19: 
            { System.out.println("PONTO_E_VIRGULA"); return new Symbol( Sym.PONTO_E_VIRGULA, yychar, yyline, yytext());
            }
          case 74: break;
          case 20: 
            { System.out.println(":");return new Symbol( Sym.DOIS_PONTOS, yychar, yyline, yytext());
            }
          case 75: break;
          case 21: 
            { System.out.println("(");return new Symbol( Sym.ABRE_PARENTESIS, yychar, yyline, yytext());
            }
          case 76: break;
          case 22: 
            { System.out.println(")");return new Symbol( Sym.FECHA_PARENTESIS, yychar, yyline, yytext());
            }
          case 77: break;
          case 23: 
            { System.out.println("{");return new Symbol( Sym.ABRE_CHAVES, yychar, yyline, yytext());
            }
          case 78: break;
          case 24: 
            { System.out.println("VIRGULA");return new Symbol( Sym.VIRGULA, yychar, yyline, yytext());
            }
          case 79: break;
          case 25: 
            { System.out.println("dois pontos");return new Symbol( Sym.CONCATENAR_STRING, yychar, yyline, yytext());
            }
          case 80: break;
          case 26: 
            { System.out.println("StringLua"); return new Symbol( Sym.STRING_LUA, yychar, yyline, yytext());
            }
          case 81: break;
          case 27: 
            { System.out.println("LACO FACA");return new Symbol(Sym.LACO_FACA, yychar, yyline, yytext());
            }
          case 82: break;
          case 28: 
            { System.out.println("OPERADOR_OU");return new Symbol( Sym.OPERADOR_OU, yychar, yyline, yytext());
            }
          case 83: break;
          case 29: 
            { System.out.println("DENTRO");return new Symbol( Sym.DENTRO, yychar, yyline, yytext());
            }
          case 84: break;
          case 30: 
            { System.out.println("SE");return new Symbol( Sym.SE_CONDICIONAL, yychar, yyline, yytext());
            }
          case 85: break;
          case 31: 
            { System.out.println(">=");return new Symbol( Sym.MAIOR_IGUAL_QUE, yychar, yyline, yytext());
            }
          case 86: break;
          case 32: 
            { System.out.println("==");return new Symbol( Sym.IGUAL_COMPARATIVO, yychar, yyline, yytext());
            }
          case 87: break;
          case 33: 
            { System.out.println("<=");return new Symbol( Sym.MENOR_IGUAL_QUE, yychar, yyline, yytext());
            }
          case 88: break;
          case 34: 
            { System.out.println("~=");return new Symbol( Sym.DIFERENTE, yychar, yyline, yytext());
            }
          case 89: break;
          case 35: 
            { System.out.println("tres pontos");return new Symbol( Sym.EXPRESSAO_VARARG, yychar, yyline, yytext());
            }
          case 90: break;
          case 36: 
            { System.out.println("OPERADOR-E");return new Symbol(Sym.OPERADOR_E, yychar, yyline, yytext());
            }
          case 91: break;
          case 37: 
            { System.out.println("NEGACAO");return new Symbol( Sym.NEGACAO, yychar, yyline, yytext());
            }
          case 92: break;
          case 38: 
            { System.out.println("NUL");return new Symbol( Sym.NULO, yychar, yyline, yytext());
            }
          case 93: break;
          case 39: 
            { System.out.println("FIM");return new Symbol( Sym.FIM_DO_LACO, yychar, yyline, yytext());
            }
          case 94: break;
          case 40: 
            { System.out.println("LACO PARA");return new Symbol( Sym.LACO_PARA, yychar, yyline, yytext());
            }
          case 95: break;
          case 41: 
            { System.out.println("COMENTARIO CURTO");
            }
          case 96: break;
          case 42: 
            { System.out.println("senao");return new Symbol( Sym.SENAO, yychar, yyline, yytext());
            }
          case 97: break;
          case 43: 
            { System.out.println("VERDADEIRO");return new Symbol( Sym.VALOR_VERDADEIRO, yychar, yyline, yytext());
            }
          case 98: break;
          case 44: 
            { System.out.println("ENTAO");return new Symbol( Sym.ENTAO, yychar, yyline, yytext());
            }
          case 99: break;
          case 45: 
            { System.out.println("QUEBRA DE LACO");return new Symbol(Sym.QUEBRA_LACO, yychar, yyline, yytext());
            }
          case 100: break;
          case 46: 
            { System.out.println("DEFINICAO_LOCAL");return new Symbol( Sym.DEFINICAO_LOCAL, yychar, yyline, yytext());
            }
          case 101: break;
          case 47: 
            { System.out.println("FALSO");return new Symbol( Sym.VALOR_FALSO, yychar, yyline, yytext());
            }
          case 102: break;
          case 48: 
            { System.out.println("ATE");return new Symbol( Sym.ATE_LIMITE_LACO, yychar, yyline, yytext());
            }
          case 103: break;
          case 49: 
            { System.out.println("ENQUANTO");return new Symbol( Sym.LACO_ENQUANTO, yychar, yyline, yytext());
            }
          case 104: break;
          case 50: 
            { System.out.println("RETORNE");return new Symbol( Sym.RETORNO, yychar, yyline, yytext());
            }
          case 105: break;
          case 51: 
            { System.out.println("REPETIR");return new Symbol( Sym.REPETICAO, yychar, yyline, yytext());
            }
          case 106: break;
          case 52: 
            { System.out.println("senao SE");return new Symbol( Sym.SENAO_SE, yychar, yyline, yytext());
            }
          case 107: break;
          case 53: 
            { System.out.println("COMENTARIO LONGO");
            }
          case 108: break;
          case 54: 
            { System.out.println("FUNCAO");return new Symbol( Sym.FUNCAO, yychar, yyline, yytext());
            }
          case 109: break;
          case 55: 
            { System.out.println("FUNCAO LOCAL");return new Symbol ( Sym.FUNCAO_LOCAL, yychar, yyline, yytext());
            }
          case 110: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
