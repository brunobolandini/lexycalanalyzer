
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jan 02 17:35:54 BRST 2017
//----------------------------------------------------

package lua;

import java.util.*;
import java.io.*;
import java_cup.runtime.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jan 02 17:35:54 BRST 2017
  */
public class Parser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\031\004" +
    "\000\002\031\005\000\002\015\003\000\002\015\003\000" +
    "\002\015\005\000\002\003\005\000\002\003\003\000\002" +
    "\003\005\000\002\003\007\000\002\003\006\000\002\003" +
    "\010\000\002\003\014\000\002\003\011\000\002\003\005" +
    "\000\002\003\005\000\002\003\005\000\002\006\004\000" +
    "\002\006\003\000\002\027\003\000\002\027\003\000\002" +
    "\004\004\000\002\007\003\000\002\007\005\000\002\007" +
    "\005\000\002\032\004\000\002\032\007\000\002\032\003" +
    "\000\002\033\004\000\002\033\003\000\002\010\003\000" +
    "\002\010\005\000\002\013\003\000\002\013\005\000\002" +
    "\034\004\000\002\034\003\000\002\012\003\000\002\012" +
    "\005\000\002\011\003\000\002\011\006\000\002\011\005" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\014\003\000\002\014\003\000\002" +
    "\014\003\000\002\014\003\000\002\014\003\000\002\014" +
    "\005\000\002\014\004\000\002\016\004\000\002\016\006" +
    "\000\002\017\005\000\002\017\003\000\002\017\003\000" +
    "\002\020\007\000\002\035\003\000\002\035\003\000\002" +
    "\021\003\000\002\021\005\000\002\021\003\000\002\022" +
    "\005\000\002\022\004\000\002\023\003\000\002\023\005" +
    "\000\002\024\007\000\002\024\005\000\002\024\003\000" +
    "\002\025\003\000\002\025\003\000\002\026\003\000\002" +
    "\026\003\000\002\026\003\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\026\003\000\002\026\003\000\002\026\003\000" +
    "\002\026\003\000\002\026\003\000\002\026\003\000\002" +
    "\026\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\036\003\000\002\036\003\000\002\030\003" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\034\004\004\010\007\012\020\013\025\015" +
    "\023\021\027\023\017\024\021\025\010\026\013\027\026" +
    "\036\016\065\030\001\002\000\110\002\uffd7\004\uffd7\010" +
    "\uffd7\011\uffd7\014\uffd7\016\uffd7\017\uffd7\020\uffd7\033\uffd7" +
    "\034\uffd7\036\uffd7\037\uffd7\040\uffd7\041\uffd7\042\uffd7\043" +
    "\uffd7\044\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052\uffd7" +
    "\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7\061" +
    "\uffd7\062\uffd7\063\uffd7\065\uffd7\066\uffd7\067\uffd7\070\uffd7" +
    "\001\002\000\004\037\261\001\002\000\016\002\ufffd\011" +
    "\ufffd\014\ufffd\017\ufffd\020\ufffd\036\ufffd\001\002\000\034" +
    "\004\004\010\007\012\020\013\025\015\023\021\027\023" +
    "\017\024\021\025\010\026\013\027\026\036\016\065\030" +
    "\001\002\000\004\004\127\001\002\000\022\004\ufffa\037" +
    "\uffdf\040\ufffa\041\ufffa\042\250\043\ufffa\065\ufffa\067\ufffa" +
    "\001\002\000\004\002\247\001\002\000\036\004\004\005" +
    "\050\023\045\030\056\031\051\032\055\035\040\036\016" +
    "\045\053\050\036\064\047\065\030\067\052\071\054\001" +
    "\002\000\016\002\ufffe\011\ufffe\014\ufffe\017\ufffe\020\ufffe" +
    "\036\ufffe\001\002\000\016\004\144\040\146\041\142\043" +
    "\145\065\147\067\052\001\002\000\052\002\uffa1\004\uffa1" +
    "\010\uffa1\011\uffa1\012\uffa1\013\uffa1\014\uffa1\015\uffa1\017" +
    "\uffa1\020\uffa1\021\uffa1\023\uffa1\024\uffa1\025\uffa1\026\uffa1" +
    "\027\uffa1\036\uffa1\046\uffa1\065\uffa1\066\uffa1\001\002\000" +
    "\004\004\240\001\002\000\034\004\004\005\050\023\045" +
    "\030\056\031\051\032\055\035\040\045\053\050\036\064" +
    "\047\065\030\067\052\071\054\001\002\000\004\004\231" +
    "\001\002\000\022\004\ufff9\036\ufff6\040\ufff9\041\ufff9\043" +
    "\ufff9\046\ufff6\065\ufff9\067\ufff9\001\002\000\034\004\004" +
    "\005\050\023\045\030\056\031\051\032\055\035\040\045" +
    "\053\050\036\064\047\065\030\067\052\071\054\001\002" +
    "\000\022\002\uffff\011\uffff\014\uffff\017\uffff\020\uffff\026" +
    "\013\027\026\036\uffff\001\002\000\034\004\004\010\007" +
    "\012\020\013\025\015\023\021\027\023\017\024\021\025" +
    "\010\026\013\027\026\036\016\065\030\001\002\000\016" +
    "\002\uffeb\011\uffeb\014\uffeb\017\uffeb\020\uffeb\036\uffeb\001" +
    "\002\000\004\004\166\001\002\000\034\004\004\005\050" +
    "\023\045\030\056\031\051\032\055\035\040\045\053\050" +
    "\036\064\047\065\030\067\052\071\054\001\002\000\006" +
    "\036\016\046\034\001\002\000\046\002\uffa2\004\uffa2\010" +
    "\uffa2\011\uffa2\012\uffa2\013\uffa2\014\uffa2\015\uffa2\017\uffa2" +
    "\020\uffa2\021\uffa2\023\uffa2\024\uffa2\025\uffa2\026\uffa2\027" +
    "\uffa2\036\uffa2\065\uffa2\001\002\000\046\002\ufffc\004\004" +
    "\010\007\011\ufffc\012\020\013\025\014\ufffc\015\023\017" +
    "\ufffc\020\ufffc\021\027\023\017\024\021\025\010\026\ufffc" +
    "\027\ufffc\036\ufffc\065\030\001\002\000\046\002\uffa3\004" +
    "\uffa3\010\uffa3\011\uffa3\012\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\017\uffa3\020\uffa3\021\uffa3\023\uffa3\024\uffa3\025\uffa3\026" +
    "\uffa3\027\uffa3\036\uffa3\065\uffa3\001\002\000\022\002\ufffb" +
    "\011\ufffb\014\ufffb\017\ufffb\020\ufffb\026\ufffb\027\ufffb\036" +
    "\ufffb\001\002\000\034\004\uffa6\005\uffa6\023\uffa6\030\uffa6" +
    "\031\uffa6\032\uffa6\035\uffa6\045\uffa6\050\uffa6\064\uffa6\065" +
    "\uffa6\067\uffa6\071\uffa6\001\002\000\034\004\004\005\050" +
    "\023\045\030\056\031\051\032\055\035\040\045\053\050" +
    "\036\064\047\065\030\067\052\071\054\001\002\000\034" +
    "\004\uffa5\005\uffa5\023\uffa5\030\uffa5\031\uffa5\032\uffa5\035" +
    "\uffa5\045\uffa5\050\uffa5\064\uffa5\065\uffa5\067\uffa5\071\uffa5" +
    "\001\002\000\106\002\ufffa\004\ufffa\010\ufffa\011\ufffa\014" +
    "\ufffa\016\ufffa\017\ufffa\020\ufffa\033\ufffa\034\ufffa\036\ufffa" +
    "\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\046\ufffa\047" +
    "\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa\054\ufffa\055\ufffa" +
    "\056\ufffa\057\ufffa\060\ufffa\061\ufffa\062\ufffa\063\ufffa\065" +
    "\ufffa\066\ufffa\067\ufffa\070\ufffa\001\002\000\072\002\uffcc" +
    "\010\uffcc\011\uffcc\014\uffcc\016\uffcc\017\uffcc\020\uffcc\033" +
    "\uffcc\034\uffcc\036\uffcc\042\uffcc\044\uffcc\046\uffcc\047\uffcc" +
    "\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054\uffcc\055\uffcc\056" +
    "\uffcc\057\uffcc\060\uffcc\061\uffcc\062\uffcc\063\uffcc\066\uffcc" +
    "\070\uffcc\001\002\000\106\002\uffcd\004\144\010\uffcd\011" +
    "\uffcd\014\uffcd\016\uffcd\017\uffcd\020\uffcd\033\uffcd\034\uffcd" +
    "\036\uffcd\040\146\041\142\042\uffcd\043\145\044\uffcd\046" +
    "\uffcd\047\uffcd\050\uffcd\051\uffcd\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\062\uffcd\063" +
    "\uffcd\065\147\066\uffcd\067\052\070\uffcd\001\002\000\072" +
    "\002\uffce\010\uffce\011\uffce\014\uffce\016\uffce\017\uffce\020" +
    "\uffce\033\uffce\034\uffce\036\uffce\042\uffce\044\uffce\046\uffce" +
    "\047\uffce\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055" +
    "\uffce\056\uffce\057\uffce\060\uffce\061\uffce\062\uffce\063\uffce" +
    "\066\uffce\070\uffce\001\002\000\004\065\124\001\002\000" +
    "\106\002\ufff9\004\ufff9\010\ufff9\011\ufff9\014\ufff9\016\ufff9" +
    "\017\ufff9\020\ufff9\033\ufff9\034\ufff9\036\ufff9\040\ufff9\041" +
    "\ufff9\042\ufff9\043\ufff9\044\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\052\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057" +
    "\ufff9\060\ufff9\061\ufff9\062\ufff9\063\ufff9\065\ufff9\066\ufff9" +
    "\067\ufff9\070\ufff9\001\002\000\034\004\uffa4\005\uffa4\023" +
    "\uffa4\030\uffa4\031\uffa4\032\uffa4\035\uffa4\045\uffa4\050\uffa4" +
    "\064\uffa4\065\uffa4\067\uffa4\071\uffa4\001\002\000\072\002" +
    "\uffd0\010\uffd0\011\uffd0\014\uffd0\016\uffd0\017\uffd0\020\uffd0" +
    "\033\uffd0\034\uffd0\036\uffd0\042\uffd0\044\uffd0\046\uffd0\047" +
    "\uffd0\050\uffd0\051\uffd0\052\uffd0\053\uffd0\054\uffd0\055\uffd0" +
    "\056\uffd0\057\uffd0\060\uffd0\061\uffd0\062\uffd0\063\uffd0\066" +
    "\uffd0\070\uffd0\001\002\000\072\002\uffd3\010\uffd3\011\uffd3" +
    "\014\uffd3\016\uffd3\017\uffd3\020\uffd3\033\uffd3\034\uffd3\036" +
    "\uffd3\042\uffd3\044\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3" +
    "\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060" +
    "\uffd3\061\uffd3\062\uffd3\063\uffd3\066\uffd3\070\uffd3\001\002" +
    "\000\040\004\102\005\050\023\045\030\056\031\051\032" +
    "\055\035\040\043\103\045\053\050\036\064\047\065\030" +
    "\067\052\070\105\071\054\001\002\000\072\002\uffcf\010" +
    "\uffcf\011\uffcf\014\uffcf\016\uffcf\017\uffcf\020\uffcf\033\uffcf" +
    "\034\uffcf\036\uffcf\042\uffcf\044\uffcf\046\uffcf\047\uffcf\050" +
    "\uffcf\051\uffcf\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf" +
    "\057\uffcf\060\uffcf\061\uffcf\062\uffcf\063\uffcf\066\uffcf\070" +
    "\uffcf\001\002\000\072\002\uffd1\010\uffd1\011\uffd1\014\uffd1" +
    "\016\uffd1\017\uffd1\020\uffd1\033\uffd1\034\uffd1\036\uffd1\042" +
    "\uffd1\044\uffd1\046\uffd1\047\uffd1\050\uffd1\051\uffd1\052\uffd1" +
    "\053\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061" +
    "\uffd1\062\uffd1\063\uffd1\066\uffd1\070\uffd1\001\002\000\072" +
    "\002\uffd2\010\uffd2\011\uffd2\014\uffd2\016\uffd2\017\uffd2\020" +
    "\uffd2\033\uffd2\034\uffd2\036\uffd2\042\uffd2\044\uffd2\046\uffd2" +
    "\047\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\062\uffd2\063\uffd2" +
    "\066\uffd2\070\uffd2\001\002\000\072\002\uffd4\010\uffd4\011" +
    "\uffd4\014\uffd4\016\uffd4\017\uffd4\020\uffd4\033\uffd4\034\uffd4" +
    "\036\uffd4\042\uffd4\044\uffd4\046\uffd4\047\uffd4\050\uffd4\051" +
    "\uffd4\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4" +
    "\060\uffd4\061\uffd4\062\uffd4\063\uffd4\066\uffd4\070\uffd4\001" +
    "\002\000\042\033\061\034\063\047\076\050\070\051\065" +
    "\052\074\053\062\054\060\055\100\056\067\057\072\060" +
    "\071\061\073\062\075\063\077\066\066\001\002\000\034" +
    "\004\uffb1\005\uffb1\023\uffb1\030\uffb1\031\uffb1\032\uffb1\035" +
    "\uffb1\045\uffb1\050\uffb1\064\uffb1\065\uffb1\067\uffb1\071\uffb1" +
    "\001\002\000\034\004\uffa8\005\uffa8\023\uffa8\030\uffa8\031" +
    "\uffa8\032\uffa8\035\uffa8\045\uffa8\050\uffa8\064\uffa8\065\uffa8" +
    "\067\uffa8\071\uffa8\001\002\000\034\004\uffb0\005\uffb0\023" +
    "\uffb0\030\uffb0\031\uffb0\032\uffb0\035\uffb0\045\uffb0\050\uffb0" +
    "\064\uffb0\065\uffb0\067\uffb0\071\uffb0\001\002\000\034\004" +
    "\uffa7\005\uffa7\023\uffa7\030\uffa7\031\uffa7\032\uffa7\035\uffa7" +
    "\045\uffa7\050\uffa7\064\uffa7\065\uffa7\067\uffa7\071\uffa7\001" +
    "\002\000\034\004\004\005\050\023\045\030\056\031\051" +
    "\032\055\035\040\045\053\050\036\064\047\065\030\067" +
    "\052\071\054\001\002\000\034\004\uffb3\005\uffb3\023\uffb3" +
    "\030\uffb3\031\uffb3\032\uffb3\035\uffb3\045\uffb3\050\uffb3\064" +
    "\uffb3\065\uffb3\067\uffb3\071\uffb3\001\002\000\106\002\ufff8" +
    "\004\ufff8\010\ufff8\011\ufff8\014\ufff8\016\ufff8\017\ufff8\020" +
    "\ufff8\033\ufff8\034\ufff8\036\ufff8\040\ufff8\041\ufff8\042\ufff8" +
    "\043\ufff8\044\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\052" +
    "\ufff8\053\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8" +
    "\061\ufff8\062\ufff8\063\ufff8\065\ufff8\066\ufff8\067\ufff8\070" +
    "\ufff8\001\002\000\034\004\uffab\005\uffab\023\uffab\030\uffab" +
    "\031\uffab\032\uffab\035\uffab\045\uffab\050\uffab\064\uffab\065" +
    "\uffab\067\uffab\071\uffab\001\002\000\034\004\uffb4\005\uffb4" +
    "\023\uffb4\030\uffb4\031\uffb4\032\uffb4\035\uffb4\045\uffb4\050" +
    "\uffb4\064\uffb4\065\uffb4\067\uffb4\071\uffb4\001\002\000\034" +
    "\004\uffaa\005\uffaa\023\uffaa\030\uffaa\031\uffaa\032\uffaa\035" +
    "\uffaa\045\uffaa\050\uffaa\064\uffaa\065\uffaa\067\uffaa\071\uffaa" +
    "\001\002\000\034\004\uffad\005\uffad\023\uffad\030\uffad\031" +
    "\uffad\032\uffad\035\uffad\045\uffad\050\uffad\064\uffad\065\uffad" +
    "\067\uffad\071\uffad\001\002\000\034\004\uffa9\005\uffa9\023" +
    "\uffa9\030\uffa9\031\uffa9\032\uffa9\035\uffa9\045\uffa9\050\uffa9" +
    "\064\uffa9\065\uffa9\067\uffa9\071\uffa9\001\002\000\034\004" +
    "\uffb2\005\uffb2\023\uffb2\030\uffb2\031\uffb2\032\uffb2\035\uffb2" +
    "\045\uffb2\050\uffb2\064\uffb2\065\uffb2\067\uffb2\071\uffb2\001" +
    "\002\000\034\004\uffae\005\uffae\023\uffae\030\uffae\031\uffae" +
    "\032\uffae\035\uffae\045\uffae\050\uffae\064\uffae\065\uffae\067" +
    "\uffae\071\uffae\001\002\000\034\004\uffb5\005\uffb5\023\uffb5" +
    "\030\uffb5\031\uffb5\032\uffb5\035\uffb5\045\uffb5\050\uffb5\064" +
    "\uffb5\065\uffb5\067\uffb5\071\uffb5\001\002\000\034\004\uffac" +
    "\005\uffac\023\uffac\030\uffac\031\uffac\032\uffac\035\uffac\045" +
    "\uffac\050\uffac\064\uffac\065\uffac\067\uffac\071\uffac\001\002" +
    "\000\034\004\uffaf\005\uffaf\023\uffaf\030\uffaf\031\uffaf\032" +
    "\uffaf\035\uffaf\045\uffaf\050\uffaf\064\uffaf\065\uffaf\067\uffaf" +
    "\071\uffaf\001\002\000\072\002\uffcb\010\uffcb\011\uffcb\014" +
    "\uffcb\016\uffcb\017\uffcb\020\uffcb\033\061\034\063\036\uffcb" +
    "\042\uffcb\044\uffcb\046\uffcb\047\076\050\070\051\065\052" +
    "\074\053\062\054\060\055\100\056\067\057\072\060\071" +
    "\061\073\062\075\063\077\066\uffcb\070\uffcb\001\002\000" +
    "\064\004\uffd7\033\uffd7\034\uffd7\037\121\040\uffd7\041\uffd7" +
    "\042\uffd7\043\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\062\uffd7\063\uffd7\065\uffd7\067\uffd7\070\uffd7\001" +
    "\002\000\034\004\004\005\050\023\045\030\056\031\051" +
    "\032\055\035\040\045\053\050\036\064\047\065\030\067" +
    "\052\071\054\001\002\000\010\042\113\046\112\070\uffbc" +
    "\001\002\000\106\002\uffbd\004\uffbd\010\uffbd\011\uffbd\014" +
    "\uffbd\016\uffbd\017\uffbd\020\uffbd\033\uffbd\034\uffbd\036\uffbd" +
    "\040\uffbd\041\uffbd\042\uffbd\043\uffbd\044\uffbd\046\uffbd\047" +
    "\uffbd\050\uffbd\051\uffbd\052\uffbd\053\uffbd\054\uffbd\055\uffbd" +
    "\056\uffbd\057\uffbd\060\uffbd\061\uffbd\062\uffbd\063\uffbd\065" +
    "\uffbd\066\uffbd\067\uffbd\070\uffbd\001\002\000\004\070\110" +
    "\001\002\000\046\033\061\034\063\042\uffb8\046\uffb8\047" +
    "\076\050\070\051\065\052\074\053\062\054\060\055\100" +
    "\056\067\057\072\060\071\061\073\062\075\063\077\070" +
    "\uffb8\001\002\000\106\002\uffbe\004\uffbe\010\uffbe\011\uffbe" +
    "\014\uffbe\016\uffbe\017\uffbe\020\uffbe\033\uffbe\034\uffbe\036" +
    "\uffbe\040\uffbe\041\uffbe\042\uffbe\043\uffbe\044\uffbe\046\uffbe" +
    "\047\uffbe\050\uffbe\051\uffbe\052\uffbe\053\uffbe\054\uffbe\055" +
    "\uffbe\056\uffbe\057\uffbe\060\uffbe\061\uffbe\062\uffbe\063\uffbe" +
    "\065\uffbe\066\uffbe\067\uffbe\070\uffbe\001\002\000\036\004" +
    "\102\005\050\023\045\030\056\031\051\032\055\035\040" +
    "\043\103\045\053\050\036\064\047\065\030\067\052\071" +
    "\054\001\002\000\036\004\uffb6\005\uffb6\023\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\035\uffb6\043\uffb6\045\uffb6\050\uffb6\064" +
    "\uffb6\065\uffb6\067\uffb6\071\uffb6\001\002\000\036\004\uffb7" +
    "\005\uffb7\023\uffb7\030\uffb7\031\uffb7\032\uffb7\035\uffb7\043" +
    "\uffb7\045\uffb7\050\uffb7\064\uffb7\065\uffb7\067\uffb7\071\uffb7" +
    "\001\002\000\004\070\uffbb\001\002\000\042\033\061\034" +
    "\063\044\116\047\076\050\070\051\065\052\074\053\062" +
    "\054\060\055\100\056\067\057\072\060\071\061\073\062" +
    "\075\063\077\001\002\000\004\037\117\001\002\000\034" +
    "\004\004\005\050\023\045\030\056\031\051\032\055\035" +
    "\040\045\053\050\036\064\047\065\030\067\052\071\054" +
    "\001\002\000\046\033\061\034\063\042\uffba\046\uffba\047" +
    "\076\050\070\051\065\052\074\053\062\054\060\055\100" +
    "\056\067\057\072\060\071\061\073\062\075\063\077\070" +
    "\uffba\001\002\000\034\004\004\005\050\023\045\030\056" +
    "\031\051\032\055\035\040\045\053\050\036\064\047\065" +
    "\030\067\052\071\054\001\002\000\046\033\061\034\063" +
    "\042\uffb9\046\uffb9\047\076\050\070\051\065\052\074\053" +
    "\062\054\060\055\100\056\067\057\072\060\071\061\073" +
    "\062\075\063\077\070\uffb9\001\002\000\072\002\uffe8\010" +
    "\uffe8\011\uffe8\014\uffe8\016\uffe8\017\uffe8\020\uffe8\033\uffe8" +
    "\034\uffe8\036\uffe8\042\uffe8\044\uffe8\046\uffe8\047\uffe8\050" +
    "\uffe8\051\uffe8\052\uffe8\053\uffe8\054\uffe8\055\uffe8\056\uffe8" +
    "\057\uffe8\060\uffe8\061\uffe8\062\uffe8\063\uffe8\066\uffe8\070" +
    "\uffe8\001\002\000\010\004\127\036\016\045\130\001\002" +
    "\000\006\042\136\066\uffc1\001\002\000\004\066\uffc2\001" +
    "\002\000\012\036\uffd9\037\uffd9\042\uffd9\066\uffd9\001\002" +
    "\000\004\066\uffbf\001\002\000\004\066\uffc3\001\002\000" +
    "\004\066\133\001\002\000\034\004\004\010\007\012\020" +
    "\013\025\015\023\021\027\023\017\024\021\025\010\026" +
    "\013\027\026\036\016\065\030\001\002\000\004\011\135" +
    "\001\002\000\072\002\uffc4\010\uffc4\011\uffc4\014\uffc4\016" +
    "\uffc4\017\uffc4\020\uffc4\033\uffc4\034\uffc4\036\uffc4\042\uffc4" +
    "\044\uffc4\046\uffc4\047\uffc4\050\uffc4\051\uffc4\052\uffc4\053" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\062\uffc4\063\uffc4\066\uffc4\070\uffc4\001\002\000\006\004" +
    "\137\045\140\001\002\000\014\022\uffd8\036\uffd8\037\uffd8" +
    "\042\uffd8\066\uffd8\001\002\000\004\066\uffc0\001\002\000" +
    "\106\002\uffc6\004\uffc6\010\uffc6\011\uffc6\014\uffc6\016\uffc6" +
    "\017\uffc6\020\uffc6\033\uffc6\034\uffc6\036\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\044\uffc6\046\uffc6\047\uffc6\050\uffc6" +
    "\051\uffc6\052\uffc6\053\uffc6\054\uffc6\055\uffc6\056\uffc6\057" +
    "\uffc6\060\uffc6\061\uffc6\062\uffc6\063\uffc6\065\uffc6\066\uffc6" +
    "\067\uffc6\070\uffc6\001\002\000\004\004\162\001\002\000" +
    "\106\002\uffc9\004\uffc9\010\uffc9\011\uffc9\014\uffc9\016\uffc9" +
    "\017\uffc9\020\uffc9\033\uffc9\034\uffc9\036\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\046\uffc9\047\uffc9\050\uffc9" +
    "\051\uffc9\052\uffc9\053\uffc9\054\uffc9\055\uffc9\056\uffc9\057" +
    "\uffc9\060\uffc9\061\uffc9\062\uffc9\063\uffc9\065\uffc9\066\uffc9" +
    "\067\uffc9\070\uffc9\001\002\000\106\002\uffc5\004\uffc5\010" +
    "\uffc5\011\uffc5\014\uffc5\016\uffc5\017\uffc5\020\uffc5\033\uffc5" +
    "\034\uffc5\036\uffc5\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044" +
    "\uffc5\046\uffc5\047\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5" +
    "\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5\061\uffc5\062" +
    "\uffc5\063\uffc5\065\uffc5\066\uffc5\067\uffc5\070\uffc5\001\002" +
    "\000\034\004\004\005\050\023\045\030\056\031\051\032" +
    "\055\035\040\045\053\050\036\064\047\065\030\067\052" +
    "\071\054\001\002\000\004\004\157\001\002\000\036\004" +
    "\004\005\050\023\045\030\056\031\051\032\055\035\040" +
    "\036\016\045\053\050\036\064\047\065\030\067\052\071" +
    "\054\001\002\000\004\066\156\001\002\000\020\002\uffe9" +
    "\011\uffe9\014\uffe9\017\uffe9\020\uffe9\036\uffe9\066\uffe9\001" +
    "\002\000\020\002\uffea\011\uffea\014\uffea\017\uffea\020\uffea" +
    "\036\uffea\066\uffea\001\002\000\064\002\uffdd\010\uffdd\011" +
    "\uffdd\014\uffdd\017\uffdd\020\uffdd\033\061\034\063\036\uffdd" +
    "\042\154\046\uffdd\047\076\050\070\051\065\052\074\053" +
    "\062\054\060\055\100\056\067\057\072\060\071\061\073" +
    "\062\075\063\077\066\uffdd\001\002\000\034\004\004\005" +
    "\050\023\045\030\056\031\051\032\055\035\040\045\053" +
    "\050\036\064\047\065\030\067\052\071\054\001\002\000" +
    "\024\002\uffdc\010\uffdc\011\uffdc\014\uffdc\017\uffdc\020\uffdc" +
    "\036\uffdc\046\uffdc\066\uffdc\001\002\000\106\002\uffc7\004" +
    "\uffc7\010\uffc7\011\uffc7\014\uffc7\016\uffc7\017\uffc7\020\uffc7" +
    "\033\uffc7\034\uffc7\036\uffc7\040\uffc7\041\uffc7\042\uffc7\043" +
    "\uffc7\044\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\055\uffc7\056\uffc7\057\uffc7\060\uffc7\061" +
    "\uffc7\062\uffc7\063\uffc7\065\uffc7\066\uffc7\067\uffc7\070\uffc7" +
    "\001\002\000\110\002\uffd5\004\uffd5\010\uffd5\011\uffd5\014" +
    "\uffd5\016\uffd5\017\uffd5\020\uffd5\033\uffd5\034\uffd5\036\uffd5" +
    "\037\uffd5\040\uffd5\041\uffd5\042\uffd5\043\uffd5\044\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5\062\uffd5\063" +
    "\uffd5\065\uffd5\066\uffd5\067\uffd5\070\uffd5\001\002\000\042" +
    "\033\061\034\063\044\161\047\076\050\070\051\065\052" +
    "\074\053\062\054\060\055\100\056\067\057\072\060\071" +
    "\061\073\062\075\063\077\001\002\000\110\002\uffd6\004" +
    "\uffd6\010\uffd6\011\uffd6\014\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\033\uffd6\034\uffd6\036\uffd6\037\uffd6\040\uffd6\041\uffd6\042" +
    "\uffd6\043\uffd6\044\uffd6\046\uffd6\047\uffd6\050\uffd6\051\uffd6" +
    "\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057\uffd6\060" +
    "\uffd6\061\uffd6\062\uffd6\063\uffd6\065\uffd6\066\uffd6\067\uffd6" +
    "\070\uffd6\001\002\000\010\004\144\065\147\067\052\001" +
    "\002\000\106\002\uffc8\004\uffc8\010\uffc8\011\uffc8\014\uffc8" +
    "\016\uffc8\017\uffc8\020\uffc8\033\uffc8\034\uffc8\036\uffc8\040" +
    "\uffc8\041\uffc8\042\uffc8\043\uffc8\044\uffc8\046\uffc8\047\uffc8" +
    "\050\uffc8\051\uffc8\052\uffc8\053\uffc8\054\uffc8\055\uffc8\056" +
    "\uffc8\057\uffc8\060\uffc8\061\uffc8\062\uffc8\063\uffc8\065\uffc8" +
    "\066\uffc8\067\uffc8\070\uffc8\001\002\000\072\002\uffca\010" +
    "\uffca\011\uffca\014\uffca\016\uffca\017\uffca\020\uffca\033\061" +
    "\034\063\036\uffca\042\uffca\044\uffca\046\uffca\047\076\050" +
    "\070\051\065\052\074\053\062\054\060\055\100\056\067" +
    "\057\072\060\071\061\073\062\075\063\077\066\uffca\070" +
    "\uffca\001\002\000\006\022\202\042\203\001\002\000\010" +
    "\022\uffd9\037\167\042\uffd9\001\002\000\034\004\004\005" +
    "\050\023\045\030\056\031\051\032\055\035\040\045\053" +
    "\050\036\064\047\065\030\067\052\071\054\001\002\000" +
    "\042\033\061\034\063\042\171\047\076\050\070\051\065" +
    "\052\074\053\062\054\060\055\100\056\067\057\072\060" +
    "\071\061\073\062\075\063\077\001\002\000\034\004\004" +
    "\005\050\023\045\030\056\031\051\032\055\035\040\045" +
    "\053\050\036\064\047\065\030\067\052\071\054\001\002" +
    "\000\044\033\061\034\063\036\016\042\175\047\076\050" +
    "\070\051\065\052\074\053\062\054\060\055\100\056\067" +
    "\057\072\060\071\061\073\062\075\063\077\001\002\000" +
    "\004\010\177\001\002\000\004\010\uffe0\001\002\000\034" +
    "\004\004\005\050\023\045\030\056\031\051\032\055\035" +
    "\040\045\053\050\036\064\047\065\030\067\052\071\054" +
    "\001\002\000\042\010\uffe1\033\061\034\063\047\076\050" +
    "\070\051\065\052\074\053\062\054\060\055\100\056\067" +
    "\057\072\060\071\061\073\062\075\063\077\001\002\000" +
    "\034\004\004\010\007\012\020\013\025\015\023\021\027" +
    "\023\017\024\021\025\010\026\013\027\026\036\016\065" +
    "\030\001\002\000\004\011\201\001\002\000\006\036\ufff1" +
    "\046\ufff1\001\002\000\034\004\004\005\050\023\045\030" +
    "\056\031\051\032\055\035\040\045\053\050\036\064\047" +
    "\065\030\067\052\071\054\001\002\000\004\004\137\001" +
    "\002\000\004\010\205\001\002\000\034\004\004\010\007" +
    "\012\020\013\025\015\023\021\027\023\017\024\021\025" +
    "\010\026\013\027\026\036\016\065\030\001\002\000\004" +
    "\011\207\001\002\000\006\036\ufff0\046\ufff0\001\002\000" +
    "\004\014\211\001\002\000\034\004\004\005\050\023\045" +
    "\030\056\031\051\032\055\035\040\045\053\050\036\064" +
    "\047\065\030\067\052\071\054\001\002\000\044\033\061" +
    "\034\063\036\ufff3\046\ufff3\047\076\050\070\051\065\052" +
    "\074\053\062\054\060\055\100\056\067\057\072\060\071" +
    "\061\073\062\075\063\077\001\002\000\016\002\000\011" +
    "\000\014\000\017\000\020\000\036\000\001\002\000\042" +
    "\016\215\033\061\034\063\047\076\050\070\051\065\052" +
    "\074\053\062\054\060\055\100\056\067\057\072\060\071" +
    "\061\073\062\075\063\077\001\002\000\034\004\004\010" +
    "\007\012\020\013\025\015\023\021\027\023\017\024\021" +
    "\025\010\026\013\027\026\036\016\065\030\001\002\000" +
    "\010\017\222\020\220\036\016\001\002\000\004\011\uffe2" +
    "\001\002\000\034\004\004\010\007\012\020\013\025\015" +
    "\023\021\027\023\017\024\021\025\010\026\013\027\026" +
    "\036\016\065\030\001\002\000\004\011\227\001\002\000" +
    "\034\004\004\005\050\023\045\030\056\031\051\032\055" +
    "\035\040\045\053\050\036\064\047\065\030\067\052\071" +
    "\054\001\002\000\042\016\224\033\061\034\063\047\076" +
    "\050\070\051\065\052\074\053\062\054\060\055\100\056" +
    "\067\057\072\060\071\061\073\062\075\063\077\001\002" +
    "\000\034\004\004\010\007\012\020\013\025\015\023\021" +
    "\027\023\017\024\021\025\010\026\013\027\026\036\016" +
    "\065\030\001\002\000\010\017\222\020\220\036\016\001" +
    "\002\000\004\011\uffe3\001\002\000\006\036\ufff2\046\ufff2" +
    "\001\002\000\004\011\uffe4\001\002\000\004\065\124\001" +
    "\002\000\006\036\uffee\046\uffee\001\002\000\042\010\234" +
    "\033\061\034\063\047\076\050\070\051\065\052\074\053" +
    "\062\054\060\055\100\056\067\057\072\060\071\061\073" +
    "\062\075\063\077\001\002\000\034\004\004\010\007\012" +
    "\020\013\025\015\023\021\027\023\017\024\021\025\010" +
    "\026\013\027\026\036\016\065\030\001\002\000\004\011" +
    "\236\001\002\000\006\036\ufff4\046\ufff4\001\002\000\004" +
    "\065\124\001\002\000\010\040\242\041\241\065\uffe7\001" +
    "\002\000\004\004\244\001\002\000\004\004\240\001\002" +
    "\000\004\065\uffe6\001\002\000\004\065\uffe5\001\002\000" +
    "\006\036\uffef\046\uffef\001\002\000\016\002\uffec\011\uffec" +
    "\014\uffec\017\uffec\020\uffec\036\uffec\001\002\000\004\002" +
    "\001\001\002\000\006\004\004\065\030\001\002\000\004" +
    "\037\uffde\001\002\000\010\036\016\037\253\042\203\001" +
    "\002\000\034\004\004\005\050\023\045\030\056\031\051" +
    "\032\055\035\040\045\053\050\036\064\047\065\030\067" +
    "\052\071\054\001\002\000\006\036\uffed\046\uffed\001\002" +
    "\000\006\036\uffda\046\uffda\001\002\000\006\036\uffdb\046" +
    "\uffdb\001\002\000\004\011\260\001\002\000\006\036\ufff5" +
    "\046\ufff5\001\002\000\034\004\004\005\050\023\045\030" +
    "\056\031\051\032\055\035\040\045\053\050\036\064\047" +
    "\065\030\067\052\071\054\001\002\000\006\036\ufff7\046" +
    "\ufff7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\024\002\011\003\030\006\013\010\004\011" +
    "\010\015\014\016\021\030\005\031\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\002" +
    "\256\003\030\006\013\010\004\011\010\015\014\016\021" +
    "\030\005\031\023\001\001\000\004\012\251\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\004\043\005\036" +
    "\011\040\013\151\014\152\015\042\016\045\022\041\027" +
    "\245\030\150\001\001\000\002\001\001\000\006\017\142" +
    "\022\140\001\001\000\002\001\001\000\004\007\236\001" +
    "\001\000\020\004\043\005\036\011\040\014\232\015\042" +
    "\016\045\022\041\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\043\005\036\011\040\014\213\015\042" +
    "\016\045\022\041\001\001\000\004\006\212\001\001\000" +
    "\024\002\207\003\030\006\013\010\004\011\010\015\014" +
    "\016\021\030\005\031\023\001\001\000\002\001\001\000" +
    "\004\012\164\001\001\000\020\004\043\005\036\011\040" +
    "\014\056\015\042\016\045\022\041\001\001\000\006\030" +
    "\031\036\032\001\001\000\002\001\001\000\016\003\030" +
    "\010\004\011\010\015\014\016\021\031\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\043\005\036\011\040\014\163\015\042\016\045\022" +
    "\041\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\017\142\022\140\001\001\000\002\001" +
    "\001\000\004\020\122\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\024\004" +
    "\043\005\036\011\040\014\106\015\042\016\045\022\041" +
    "\023\105\024\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\063" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\004\043\005\036\011\040" +
    "\014\100\015\042\016\045\022\041\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\063\001\001\000" +
    "\002\001\001\000\020\004\043\005\036\011\040\014\114" +
    "\015\042\016\045\022\041\001\001\000\004\025\110\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\026\063" +
    "\001\001\000\002\001\001\000\024\004\043\005\036\011" +
    "\040\014\106\015\042\016\045\022\041\023\113\024\103" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\063\001\001\000\002\001\001\000\020" +
    "\004\043\005\036\011\040\014\117\015\042\016\045\022" +
    "\041\001\001\000\004\026\063\001\001\000\020\004\043" +
    "\005\036\011\040\014\121\015\042\016\045\022\041\001" +
    "\001\000\004\026\063\001\001\000\002\001\001\000\012" +
    "\012\124\021\130\030\125\035\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\024\002\133\003" +
    "\030\006\013\010\004\011\010\015\014\016\021\030\005" +
    "\031\023\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\020\004\043\005\036\011\040\014\157\015\042" +
    "\016\045\022\041\001\001\000\002\001\001\000\026\004" +
    "\043\005\036\011\040\013\151\014\152\015\042\016\045" +
    "\022\041\027\147\030\150\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\063\001\001" +
    "\000\022\004\043\005\036\011\040\013\154\014\152\015" +
    "\042\016\045\022\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\026\063\001\001\000" +
    "\002\001\001\000\006\017\162\022\140\001\001\000\002" +
    "\001\001\000\004\026\063\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\043\005\036\011\040\014\167" +
    "\015\042\016\045\022\041\001\001\000\004\026\063\001" +
    "\001\000\020\004\043\005\036\011\040\014\171\015\042" +
    "\016\045\022\041\001\001\000\010\026\063\030\173\033" +
    "\172\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\004\043\005\036\011\040\014\175\015\042\016\045\022" +
    "\041\001\001\000\004\026\063\001\001\000\024\002\177" +
    "\003\030\006\013\010\004\011\010\015\014\016\021\030" +
    "\005\031\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\022\004\043\005\036\011\040\013\203\014\152\015" +
    "\042\016\045\022\041\001\001\000\002\001\001\000\002" +
    "\001\001\000\024\002\205\003\030\006\013\010\004\011" +
    "\010\015\014\016\021\030\005\031\023\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\020\004" +
    "\043\005\036\011\040\014\211\015\042\016\045\022\041" +
    "\001\001\000\004\026\063\001\001\000\002\001\001\000" +
    "\004\026\063\001\001\000\024\002\215\003\030\006\013" +
    "\010\004\011\010\015\014\016\021\030\005\031\023\001" +
    "\001\000\006\030\216\032\220\001\001\000\002\001\001" +
    "\000\024\002\227\003\030\006\013\010\004\011\010\015" +
    "\014\016\021\030\005\031\023\001\001\000\002\001\001" +
    "\000\020\004\043\005\036\011\040\014\222\015\042\016" +
    "\045\022\041\001\001\000\004\026\063\001\001\000\024" +
    "\002\224\003\030\006\013\010\004\011\010\015\014\016" +
    "\021\030\005\031\023\001\001\000\006\030\216\032\225" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\020\231\001\001\000\002\001\001\000\004" +
    "\026\063\001\001\000\024\002\234\003\030\006\013\010" +
    "\004\011\010\015\014\016\021\030\005\031\023\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\020\244\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\007\242" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\010\250" +
    "\011\010\015\014\016\045\001\001\000\002\001\001\000" +
    "\006\030\254\034\253\001\001\000\022\004\043\005\036" +
    "\011\040\013\255\014\152\015\042\016\045\022\041\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\022\004\043\005" +
    "\036\011\040\013\261\014\152\015\042\016\045\022\041" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {
               
    }

  /** Scan to get the next Symbol. */
  public java_cup.runtime.Symbol scan()
    throws java.lang.Exception
    {
 return getScanner().next_token(); 
    }


    public static void main(String[] args) throws Exception{
        try {
			Parser parser = new Parser();
			parser.setScanner(new Lexer(new FileReader (args[0])));
            parser.parse();
        } catch ( IOException exception ) {
            throw new Error( "Unable to open file" );
        }
    }

    public void syntax_error (Symbol s) {
        report_error("Erro de sintaxe na linha: " + (s.right+1) + " e na coluna: " + s.left + ". Texto: -- "+s.value+ " --", null);
    }



}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // vazio ::= brancos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("vazio",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // n_ponto_e_virgula ::= vazio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_ponto_e_virgula",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // n_ponto_e_virgula ::= PONTO_E_VIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_ponto_e_virgula",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // op_un ::= TAMANHO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_un",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // op_un ::= NEGACAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_un",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // op_un ::= SUBTRACAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_un",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // op_bin ::= OPERADOR_OU 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // op_bin ::= OPERADOR_E 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // op_bin ::= MAIOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // op_bin ::= MAIOR_QUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // op_bin ::= MENOR_QUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // op_bin ::= DIFERENTE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // op_bin ::= MENOR_IGUAL_QUE 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // op_bin ::= IGUAL_COMPARATIVO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // op_bin ::= CONCATENAR_STRING 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // op_bin ::= EXPONENCIACAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // op_bin ::= RESTO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // op_bin ::= DIVISAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // op_bin ::= MULTIPLICACAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // op_bin ::= SUBTRACAO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // op_bin ::= SOMA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("op_bin",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // separador_de_campos ::= PONTO_E_VIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("separador_de_campos",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // separador_de_campos ::= VIRGULA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("separador_de_campos",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // campo ::= expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("campo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // campo ::= NOME ATRIBUICAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("campo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // campo ::= ABRE_COLCHETES expressao FECHA_COLCHETES ATRIBUICAO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("campo",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // lista_de_campos ::= campo separador_de_campos lista_de_campos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_campos",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // lista_de_campos ::= campo 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_campos",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // construtor_de_tabelas ::= ABRE_CHAVES FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("construtor_de_tabelas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // construtor_de_tabelas ::= ABRE_CHAVES lista_de_campos FECHA_CHAVES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("construtor_de_tabelas",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // lista_de_parametros ::= EXPRESSAO_VARARG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_parametros",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // lista_de_parametros ::= lista_de_nomes VIRGULA EXPRESSAO_VARARG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_parametros",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // lista_de_parametros ::= lista_de_nomes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_parametros",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // n_lista_de_parametros ::= vazio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_lista_de_parametros",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // n_lista_de_parametros ::= lista_de_parametros 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_lista_de_parametros",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // corpo_da_funcao ::= ABRE_PARENTESIS n_lista_de_parametros FECHA_PARENTESIS bloco FIM_DO_LACO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("corpo_da_funcao",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // argumentos ::= NOME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // argumentos ::= construtor_de_tabelas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // argumentos ::= ABRE_PARENTESIS n_lista_de_expressoes FECHA_PARENTESIS 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("argumentos",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // chamada_de_funcao ::= prefixo_de_expressao DOIS_PONTOS NOME argumentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_de_funcao",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // chamada_de_funcao ::= prefixo_de_expressao argumentos 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("chamada_de_funcao",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // expressao ::= op_un expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // expressao ::= expressao op_bin expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // expressao ::= construtor_de_tabelas 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // expressao ::= prefixo_de_expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // expressao ::= funcao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // expressao ::= EXPRESSAO_VARARG 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // expressao ::= STRING_LUA 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // expressao ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // expressao ::= VALOR_VERDADEIRO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // expressao ::= VALOR_FALSO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // expressao ::= NULO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("expressao",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // variavel ::= prefixo_de_expressao PONTO NOME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // variavel ::= prefixo_de_expressao ABRE_COLCHETES expressao FECHA_COLCHETES 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // variavel ::= NOME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("variavel",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // lista_de_nomes ::= lista_de_nomes VIRGULA NOME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_nomes",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // lista_de_nomes ::= NOME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_nomes",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // n_atribuicao_lista_de_expressoes ::= vazio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_atribuicao_lista_de_expressoes",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // n_atribuicao_lista_de_expressoes ::= ATRIBUICAO lista_de_expressoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_atribuicao_lista_de_expressoes",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // lista_de_expressoes ::= expressao VIRGULA lista_de_expressoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // lista_de_expressoes ::= expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_expressoes",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // lista_de_variaveis ::= variavel VIRGULA lista_de_variaveis 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // lista_de_variaveis ::= variavel 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_variaveis",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // n_repeticao_de_expressoes ::= vazio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_repeticao_de_expressoes",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // n_repeticao_de_expressoes ::= VIRGULA expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_repeticao_de_expressoes",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // n_comando_senao ::= vazio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_comando_senao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // n_comando_senao ::= SENAO_SE expressao ENTAO bloco n_comando_senao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_comando_senao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // n_comando_senao ::= SENAO bloco 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_comando_senao",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // nome_de_funcao ::= NOME DOIS_PONTOS NOME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nome_de_funcao",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // nome_de_funcao ::= NOME PONTO nome_de_funcao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nome_de_funcao",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // nome_de_funcao ::= NOME 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("nome_de_funcao",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // funcao ::= FUNCAO corpo_da_funcao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("funcao",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // n_lista_de_expressoes ::= vazio 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_lista_de_expressoes",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // n_lista_de_expressoes ::= lista_de_expressoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("n_lista_de_expressoes",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ultimo_comando ::= QUEBRA_LACO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ultimo_comando",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // ultimo_comando ::= RETORNO n_lista_de_expressoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ultimo_comando",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // comando ::= DEFINICAO_LOCAL lista_de_nomes n_atribuicao_lista_de_expressoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // comando ::= FUNCAO_LOCAL NOME corpo_da_funcao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // comando ::= FUNCAO nome_de_funcao corpo_da_funcao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // comando ::= LACO_PARA lista_de_nomes DENTRO lista_de_expressoes LACO_FACA bloco FIM_DO_LACO 
            {
              Object RESULT =null;
		 System.out.print("comando::= laco_para lista_de_nomes dentro lista_de_expressoes laco_faca\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // comando ::= LACO_PARA NOME ATRIBUICAO expressao VIRGULA expressao n_repeticao_de_expressoes LACO_FACA bloco FIM_DO_LACO 
            {
              Object RESULT =null;
		 System.out.print("comando::= laco_para nome atribuicao exp virgula exp n_rep_exp bloco end lista_de_expressoes laco_faca\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // comando ::= SE_CONDICIONAL expressao ENTAO bloco n_comando_senao FIM_DO_LACO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // comando ::= REPETICAO bloco ATE_LIMITE_LACO expressao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // comando ::= LACO_ENQUANTO expressao LACO_FACA bloco FIM_DO_LACO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // comando ::= LACO_FACA bloco FIM_DO_LACO 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // comando ::= chamada_de_funcao 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // comando ::= lista_de_variaveis ATRIBUICAO lista_de_expressoes 
            {
              Object RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("comando",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // prefixo_de_expressao ::= ABRE_PARENTESIS expressao FECHA_PARENTESIS 
            {
              Object RESULT =null;
		 System.out.print("pref_de_exp::= ( EXP )\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixo_de_expressao",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // prefixo_de_expressao ::= chamada_de_funcao 
            {
              Object RESULT =null;
		 System.out.print("pref_de_exp::=chamada_de_funcao\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixo_de_expressao",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // prefixo_de_expressao ::= variavel 
            {
              Object RESULT =null;
		 System.out.print("pref_d_exp::= variavel\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("prefixo_de_expressao",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // lista_de_comandos ::= comando n_ponto_e_virgula lista_de_comandos 
            {
              Object RESULT =null;
		System.out.print("lista_de_comandos::= comando n_ponto_e_virgula\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_comandos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // lista_de_comandos ::= comando n_ponto_e_virgula 
            {
              Object RESULT =null;
		 System.out.print("lista_de_comandos::= comando n_ponto_e_virgula\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("lista_de_comandos",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // bloco ::= vazio 
            {
              Object RESULT =null;
		 System.out.print("VAZIO\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // bloco ::= ultimo_comando 
            {
              Object RESULT =null;
		 System.out.print("bloco::= ultimo_comando\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // bloco ::= lista_de_comandos 
            {
              Object RESULT =null;
		 System.out.print("bloco::= lista_de_comandos\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // bloco ::= lista_de_comandos ultimo_comando 
            {
              Object RESULT =null;
		 System.out.print("bloco ::= lista_de_comandos ultimo_comando\n"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bloco",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= bloco EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

